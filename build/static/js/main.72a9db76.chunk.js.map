{"version":3,"sources":["Teleport.js","App.js","reportWebVitals.js","index.js"],"names":["urlBase","allUrbanAreas","getUrbanArea","urbanArea","setUrbanArea","a","slug","exec","href","Promise","all","axios","get","detailsRes","salariesRes","imagesRes","x","JSON","parse","stringify","y","z","name","housing","price","data","currency_dollar_value","salary","wage25","salary_percentiles","percentile_25","wage50","percentile_50","wage75","percentile_75","commute","float_value","nightOut","movie","dinner","beer","internet","image","web","fetched","App","useState","input","setInput","display","setDisplay","setLoading","urbanAreas","setUrbanAreas","firstUrban","setFirstUrban","secondUrban","setSecondUrban","useEffect","then","res","getUrbanAreas","getNightOutTotal","ua","Grid","container","spacing","direction","alignItems","justify","style","minHeight","Box","Card","marginTop","CardHeader","title","subheader","CardContent","Autocomplete","id","options","onChange","event","value","marginBottom","getOptionLabel","option","renderInput","params","TextField","label","variant","Button","color","onClick","CardMedia","component","alt","height","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Container","background","width","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72a9db76.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst urlBase = 'https://api.teleport.org/api/';\nconst allUrbanAreas = 'urban_areas/';\nconst uaImages = 'images/';\nconst uaDetails = 'details/';\nconst uaSalaries = 'salaries/'\n\nexport const getUrbanAreas = (setUrbanAreas) => {\n  axios.get(`${urlBase}${allUrbanAreas}`).then((res) => {\n    setUrbanAreas(JSON.parse(JSON.stringify(res[\"data\"][\"_links\"][\"ua:item\"])));\n  });\n};\n\nexport const getUrbanArea = async (urbanArea, setUrbanArea) => {\n\n    //I want the slug value to intuitively get the right url for lookup\n    const regex = /(?<=\\/)slug:(.*?)(?=\\/)/;\n    //yank the slug value by pulling the full text incl. 'slug:' from phrase to next slash\n    const slug = regex.exec(urbanArea.href)[0];\n\n    //Instead of chaining requests, jjst wait for them all to resolve and then set the state\n    const [detailsRes, salariesRes, imagesRes] = await Promise.all([\n        axios.get(`${urlBase}${allUrbanAreas}${slug}/${uaDetails}`),\n        axios.get(`${urlBase}${allUrbanAreas}${slug}/${uaSalaries}`),\n        axios.get(`${urlBase}${allUrbanAreas}${slug}/${uaImages}`)\n    ]);\n\n    let x = JSON.parse(JSON.stringify(detailsRes[\"data\"][\"categories\"]));\n    let y = JSON.parse(JSON.stringify(salariesRes[\"data\"][\"salaries\"]));\n    let z = JSON.parse(JSON.stringify(imagesRes[\"data\"][\"photos\"]));\n\n    setUrbanArea(\n        {\n            name: urbanArea.name,\n            housing: {\n                //This is more hard coded and way fewer errors handled than I would ever put into prod, but I am honoring the \n                //time limit. I would want to consider that JSON format will change and what user would expect\n                //if data is unavailable for a certain field.\n                price: x[8]?.data[2]?.currency_dollar_value || 'UNKNOWN'\n            },\n            salary: {\n                wage25: y[45]?.salary_percentiles?.percentile_25 || 'UNKNOWN',\n                wage50: y[45]?.salary_percentiles?.percentile_50 || 'UNKNOWN',\n                wage75: y[45]?.salary_percentiles?.percentile_75 || 'UNKNOWN'\n            },\n            commute: x[19]?.data[1]?.float_value || 'UNKNOWN',\n            nightOut: {\n                movie: x[3]?.data[4]?.currency_dollar_value || 'UNKNOWN',\n                dinner: x[3]?.data[10]?.currency_dollar_value || 'UNKNOWN',\n                beer: x[3]?.data[6]?.currency_dollar_value || 'UNKNOWN'\n            },\n            internet: x[13]?.data[0]?.float_value || 'UNKNOWN',\n            href: urbanArea.href,\n            image: z[0]?.image?.web,\n            fetched: true\n        }\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  Grid,\n  TextField,\n} from \"@material-ui/core\";\nimport { getUrbanAreas, getUrbanArea } from \"./Teleport\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nfunction App() {\n  const [input, setInput] = useState(true);\n  const [display, setDisplay] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [urbanAreas, setUrbanAreas] = useState([]);\n  const [firstUrban, setFirstUrban] = useState({});\n  const [secondUrban, setSecondUrban] = useState({});\n\n  //run once at start to grab all valid urban areas\n  useEffect(() => {\n    getUrbanAreas(setUrbanAreas);\n  }, []);\n\n  //need to know when both async calls have resolved so I know when to switch off loading screen\n  useEffect(() => {\n    if (firstUrban.fetched && secondUrban.fetched) {\n      setLoading(false);\n      setDisplay(true);\n    }\n  }, [firstUrban, secondUrban]);\n\n  //hide the input card and display comparison when loaded\n  const handleGo = () => {\n    setInput(false);\n    setLoading(true);\n    getUrbanArea(firstUrban, setFirstUrban);\n    getUrbanArea(secondUrban, setSecondUrban);\n  };\n\n  const handleReset = () => {\n    setDisplay(false);\n    setFirstUrban({});\n    setSecondUrban({});\n    setInput(true);\n  };\n\n  const getNightOutTotal = (ua) => {\n    return ua.nightOut.movie + ua.nightOut.beer + ua.nightOut.dinner;\n  };\n\n  // prefetch the available urban areas from API on load\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      {input && (\n        <Box>\n          <Card style={{ marginTop: \"1rem\" }}>\n            <CardHeader\n              title=\"Urban Area Comparison\"\n              subheader=\"Select two urban areas and get a quick-look comparison of 5 key data points: rent, salary, commute, internet download speed, and the cost\n              of a night out.\"\n            ></CardHeader>\n            <CardContent>\n              <Autocomplete\n                id=\"ua-select-1\"\n                options={urbanAreas}\n                onChange={(event, value) => {\n                  setFirstUrban(value);\n                }}\n                style={{ marginBottom: \"1rem\" }}\n                getOptionLabel={(option) => option.name}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Select first urban area\"\n                    variant=\"outlined\"\n                  />\n                )}\n              />\n              <Autocomplete\n                id=\"ua-select-2\"\n                options={urbanAreas}\n                getOptionLabel={(option) => option.name}\n                onChange={(event, value) => {\n                  setSecondUrban(value);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Select second urban area\"\n                    variant=\"outlined\"\n                  />\n                )}\n              />\n            </CardContent>\n            <CardContent>\n              <Button variant=\"contained\" color=\"primary\" onClick={handleGo}>\n                Go\n              </Button>\n            </CardContent>\n          </Card>\n        </Box>\n      )}\n\n      {display && (\n        //In real life I would pop this into a separate component but in teh interest of time I am skipping\n        //because it's been awhile since I worked in React and I was having some issues debugging the behavior of useEffect callback on the params\n        //passed into child components - my coding time has been split between Hooks (which I prefer), and Redux, so I would need to review while I debug.\n        <Card>\n          <CardMedia\n            component=\"img\"\n            alt={firstUrban.image}\n            height=\"160\"\n            image={firstUrban.image}\n            title={firstUrban.name}\n          />\n          <CardContent>\n            {/* Hope this is in the right ballpark, I just did a very superficial comparison. */}\n            <b>Housing:</b>\n            <br />\n            <p>\n              A small apartment in {firstUrban.name} will cost you $\n              {firstUrban.housing.price} per month, while a similar apartment in{\" \"}\n              {secondUrban.name} will cost you around $\n              {secondUrban.housing.price}\n            </p>\n            <br />\n            <b>Salary:</b>\n            <br />\n            <p>\n              A software developer earning a salary within the 50th percentile\n              living in {firstUrban.name} can expect to make around $\n              {firstUrban.salary.wage50.toFixed(2)} per year. A similar worker\n              in {secondUrban.name} can expect to bring in roughly $\n              {secondUrban.salary.wage50.toFixed(2)} annually.\n            </p>\n            <br />\n            <b>Commute:</b>\n            <br />\n            <p>\n              The traffic score in {firstUrban.name} is {firstUrban.commute},\n              while the traffic score for {secondUrban.name} is{\" \"}\n              {secondUrban.commute}. A higher traffic score means you will\n              likely experience more traffic and delays on your driving commute.\n            </p>\n            <br />\n            <b>Night Out: </b>\n            <br />\n            <p>\n              For this metric we looked at the cost of a ticket to a movie, a\n              dinner at a restaurant, and a beer. That kind of night out will\n              run you ${getNightOutTotal(firstUrban)} in {firstUrban.name}. A\n              similar evening in {secondUrban.name} will likely cost around $\n              {getNightOutTotal(secondUrban)}.\n            </p>\n            <br />\n            <b>Internet:</b>\n            <br />\n            <p>\n              Typical internet download speeds in {firstUrban.name} are about{\" \"}\n              {firstUrban.internet}mbps, while in {secondUrban.name} they\n              average about {secondUrban.internet}\n              mbps.\n            </p>\n          </CardContent>\n          <CardMedia\n            component=\"img\"\n            alt={secondUrban.image}\n            height=\"160\"\n            image={secondUrban.image}\n            title={secondUrban.name}\n          />\n          <CardContent>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleReset}>\n              Start Over\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Container } from \"@material-ui/core\";\n\nReactDOM.render(\n  <Container\n    style={{\n      background:\n        \"linear-gradient(90deg, rgba(238,174,202,1) 4%, rgba(148,187,233,1) 100%)\",\n      width: \"100%\",\n      height: \"100%\",\n    }}\n  >\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Container>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}